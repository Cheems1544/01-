#include <stdio.h>

/*
题目：
从1-n这n个整数中随机选取任意多个，每种方案里的数从小到大排列，
按字典序输出所有可能的选择方案。
*/

/*
这段代码的功能是生成长度为n的所有递增序列，其中每个元素都是从1到n的整数。
它通过递归的方式实现，首先定义了一个名为`f`的函数，该函数接受三个参数：
当前序列的位置`i`、下一个可用的数字`j`以及序列的长度`n`。

在`f`函数中，首先检查是否已经达到了序列的末尾（即`j > n`），如果是，则返回，不再继续递归。
否则，使用一个循环遍历从`j`到`n-1`的所有数字，并将它们依次赋值给序列的第`i`个位置。
然后调用`print_one_result`函数打印当前的序列，
最后递归调用`f`函数，将`i+1`作为新的序列位置，`k+1`作为下一个可用的数字，
以此类推，直到生成所有可能的递增序列。

在主函数`main`中，首先读取用户输入的整数`n`，
然后调用`f(0, 1, n)`开始生成并打印所有长度为`n`的递增序列。
*/

// 定义一个长度为10的整数数组arr
int arr[10];

// 打印序列的函数，参数n表示要打印到序列的第几个元素
void print_one_result(int n) {
    // 遍历序列的前n个元素并打印
    for(int i = 0; i <= n; i++){
        // 如果不是第一个元素，则在元素之间添加换行符
        if(i) {
            printf(" \n");
        }
        
        // 打印当前元素的值
        printf("%d ", arr[i]);
    }
    
    return ;
}

// 递归生成递增序列的函数
void f(int i, int j, int n) {
    // 如果已经到达序列末尾，返回
    if(j > n) {
        return ;
    }
    
    // 从j开始遍历到n-1的所有数字
    for(int k = j; k < n; k++) {
        // 将当前数字赋值给序列的第i个位置
        arr[i] = k;
        
        // 打印当前的序列
        print_one_result(i);
        
        // 递归调用f函数，继续填充下一个位置
        f(i + 1, k + 1, n);
    }
    
    return ;
}

int main() {
    // 读取用户输入的整数n
    int n;
    scanf("%d", &n);
    
    // 调用f函数生成并打印所有长度为n的递增序列
    f(0, 1, n);
    
    return 0;
}

#include <stdio.h>

/*
有一个小球掉落在一串连续的弹簧板上，小球落到某一个弹簧板后，
会被弹到某一个地点，直到小球被弹到弹簧板以外的地方。

假设有 n 个连续的弹簧板，每个弹簧板占一个单位距离，
a[i] 代表代表第 i 个弹簧板会把小球向前弹 a[i] 个距离。
比如位置 1 的弹簧能让小球前进 2 个距离到达位置 3 。
如果小球落到某个弹簧板后，经过一系列弹跳会被弹出弹簧板，
那么小球就能从这个弹簧板弹出来。

现在小球掉到了1 号弹簧板上面，那么这个小球会被弹起多少次，
才会弹出弹簧板。 1号弹簧板也算一次。
*/

/*
这段代码的功能是计算一个整数数组中，从索引0开始，每次跳跃的距离为当前位置上的数字所表示的距离，
直到跳出数组范围为止。然后输出跳跃的次数。

具体来说，函数`f`是一个递归函数，它接受三个参数：
当前的索引`i`、整数数组`arr`和数组的长度`n`。如果当前索引`i`大于等于数组长度`n`，
则返回0，表示已经跳出了数组范围。
否则，它会递归调用自身，将索引更新为`i + arr[i]`（即当前位置的值），并将跳跃次数加1。

在`main`函数中，首先读取一个整数`n`，然后创建一个大小为`n`的整数数组`arr`。
接着，通过循环读取用户输入的每个整数并存储到数组中。最后，调用函数`f`并打印出跳跃的次数。
*/

int f(int i, int *arr, int n){
    if(i >= n){
        return 0;
    }
    
    return f(i + arr[i], arr, n) + 1;
}

int main(){
    int n;
    
    scanf("%d", &n);
    int arr[n];
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
    
    printf("%d\n", f(0, arr, n));
    
    return 0;
}

